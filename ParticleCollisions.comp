#version 440

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

/*-----------------------------------------------------------------------------------------------
Description:
    Contains all info necessary for a single node of the quad tree.  It is a dumb container 
    meant for use only by ParticleQuadTree.
Creator:    John Cox (12-17-2016)
-----------------------------------------------------------------------------------------------*/
const uint MAX_PARTICLES_PER_NODE = 10;
struct ParticleQuadTreeNode
{
    // this array size MUST match the value specified on the CPU side
    uint _indicesForContainedParticles[MAX_PARTICLES_PER_NODE];
    uint _numCurrentParticles;

    int _inUse;
    int _isSubdivided;
    uint _childNodeIndexTopLeft;
    uint _childNodeIndexTopRight;
    uint _childNodeIndexBottomRight;
    uint _childNodeIndexBottomLeft;

    // left and right edges implicitly X, top and bottom implicitly Y
    float _leftEdge;
    float _topEdge;
    float _rightEdge;
    float _bottomEdge;

    uint _neighborIndexLeft;
    uint _neighborIndexTopLeft;
    uint _neighborIndexTop;
    uint _neighborIndexTopRight;
    uint _neighborIndexRight;
    uint _neighborIndexBottomRight;
    uint _neighborIndexBottom;
    uint _neighborIndexBottomLeft;
};

/*-----------------------------------------------------------------------------------------------
Description:
    Stores info about a single particle.  Must match the version on the CPU side.
Creator: John Cox (9-25-2016)
-----------------------------------------------------------------------------------------------*/
struct Particle
{
    vec4 _pos;
    vec4 _vel;
    vec4 _netForceThisFrame;
    int _collisionCountThisFrame;
    float _mass;
    float _radiusOfInfluence;
    uint _indexOfNodeThatItIsOccupying;
    int _isActive;
};

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the ParticleQuadTreeNodes that this simulation is running.  
    Rather self-explanatory.
Creator: John Cox (1-10-2017)
-----------------------------------------------------------------------------------------------*/
layout (std430) buffer QuadTreeNodeBuffer
{
    ParticleQuadTreeNode AllNodes[];
};

/*-----------------------------------------------------------------------------------------------
Description:
    The SSBO that contains all the particles that this simulartion is running.  Rather 
    self-explanatory.
    
    Binding points are relevant only to a particular shader (that is, not to the OpenGL context 
    as a whole) and are set in the SSBO's ConfigureCompute(...) function.
Creator: John Cox (9-25-2016)
-----------------------------------------------------------------------------------------------*/
uniform uint uMaxParticles;
layout (std430) buffer ParticleBuffer
{
    Particle AllParticles[];
};

/*-----------------------------------------------------------------------------------------------
Description:
    This array is local only to this shader invocation.  It allows me to collect all collidable 
    particles into a single array so that the particle only has to perform one loop.  Shaders 
    are terrible at branch condition, so if I can get away with only one loop, then I'll do it.
    
    Note: Theoretically, the maximum number of particles that can collide at the same time is 9 
    nodes (source node + 8 neighbors) * MAX_PARTICLES_PER_NODE.
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
uint numCollidableParticles = 0;
const uint MAX_COLLIDABLE_PARTICLES = MAX_PARTICLES_PER_NODE * 9;
uint collidableParticleArray[MAX_COLLIDABLE_PARTICLES] = uint[MAX_COLLIDABLE_PARTICLES](-1);


/*-----------------------------------------------------------------------------------------------
Description:
    If the distance between the two particles is close enough, then an elastic collision is 
    calculated.  Only the first particle's values are changed.  The second particle is being 
    handled by another shader invocation.  Rather than immediately change the 1st particle's 
    velocity (there may be multiple collisions in one frame), the applied force of the second on 
    the first is calculated.

    Note: For an elastic collision between two particles of equal mass, the velocities of the 
    two will be exchanged.  I could use this simplified idea for this demo, but I want to 
    eventually have the option of different masses of particles, so I will use the general 
    case elastic collision calculations (bottom of page at link).
    http://hyperphysics.phy-astr.gsu.edu/hbase/colsta.html

    for elastic collisions between two masses (ignoring rotation because these particles are 
    points), use the calculations from this article (I followed them on paper too and it 
    seems legit)
    http://www.gamasutra.com/view/feature/3015/pool_hall_lessons_fast_accurate_.php?page=3

Parameters:
    p1Index     Index into AllParticles array for particle to change.
    p2Index     Index into AllParticles array for particle to check against.
Returns:    None
Creator:    John Cox (1-25-2017)
-----------------------------------------------------------------------------------------------*/
uniform float uInverseDeltaTimeSec;
void ParticleCollisionP1WithP2(uint p1Index, uint p2Index)
{
    // Note: ONLY change p1.  This shader is being run per particle, so the other particle will 
    // do the same calculation with this particle.
    Particle p1 = AllParticles[p1Index];
    Particle p2 = AllParticles[p2Index];

    vec4 p1ToP2 = p1._pos - p2._pos;

    // partial pythagorean theorem
    float distanceBetweenSqr = dot(p1ToP2, p1ToP2);

//    float minDistanceForCollisionSqr = (p1._radiusOfInfluence + p2._radiusOfInfluence);
//    minDistanceForCollisionSqr = minDistanceForCollisionSqr * minDistanceForCollisionSqr;
//
//    if (distanceBetweenSqr > minDistanceForCollisionSqr)
//    {
//        // nothing to do
//        return;
//    }

    vec4 normalizedLineOfContact = inversesqrt(distanceBetweenSqr) * p1ToP2;

    // ??what else do I call these??
    // Note: I don't have an intuitive understanding of this calculation, but it works.  If I 
    // understood it better, then I could write better comments, but I don't, so I'm keeping it 
    // the way that I found in the gamasutra article.
    float a1 = dot(p1._vel, p1ToP2);
    float a2 = dot(p2._vel, p1ToP2);
    float fraction = (2.0f * (a1 - a2)) / (p1._mass + p2._mass);
    vec4 p1VelocityPrime = p1._vel - (fraction * p2._mass) * normalizedLineOfContact;

    // delta momentum (impulse) = force * delta time
    // therefore force = delta momentum / delta time
    vec4 p1InitialMomentum = p1._vel * p1._mass;
    vec4 p1FinalMomentum = p1VelocityPrime * p1._mass;
    vec4 p1Force = (p1FinalMomentum - p1InitialMomentum) * uInverseDeltaTimeSec;
    

    // rathering than writing back the whole particle over and over for each call to this 
    // function, just write the values that need to be written
    AllParticles[p1Index]._netForceThisFrame += p1Force;

}

/*-----------------------------------------------------------------------------------------------
Description:
    This function helps to drill down to find which node a particle occupies.  It eliminates 
    condition branching (shaders are terrible at it) by casting boolean values to integer 
    (0 == false, 1 == true).

    Note: Boundary checks are not performed because the particle is expected to occupy the node 
    that is centered on the argument center.
Parameters: 
    particleIndex
    center
    nodeIndexTopLeft
    nodeIndexTopRight
    nodeIndexBottomLeft
    nodeIndexBottomRight
Returns:    
    A node index.  No index bounds checking is performed because (1) conditional branching tanks 
    shader performance and (2) it is expected that quad tree subdivision did its job properly.
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
uint WhichNodeIsOccupied(uint particleIndex, vec4 center, uint nodeIndexTopLeft, 
    uint nodeIndexTopRight, uint nodeIndexBottomLeft, uint nodeIndexBottomRight)
{
    vec4 particlePos = AllParticles[particleIndex]._pos;
    uint isLeft = uint(particlePos.x < center.x);
    uint isTop = uint(particlePos.y > center.y);

    uint isTopLeftIndex = nodeIndexTopLeft * (isLeft * isTop);
    uint isTopRightIndex = nodeIndexTopRight * ((1 - isLeft) * isTop);
    uint isBottomLeftIndex = nodeIndexBottomLeft * (isLeft * (1 - isTop));
    uint isBottomRightIndex = nodeIndexBottomRight * ((1 - isLeft) * (1 - isTop));

    // only one of the first four indices will be non-zero
    uint occupiedNodeIndex = isTopLeftIndex + isTopRightIndex +  isBottomLeftIndex +  isBottomRightIndex;

    return occupiedNodeIndex;
}

/*-----------------------------------------------------------------------------------------------
Description:
    Starting with the initial subdivision, dives down through subdivisions to find the deepest 
    leaf that the particle occupies.
Parameters: 
    particleIndex       Find where this particle is living.
Returns:    
    See description.
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
uniform vec4 uParticleRegionCenter;
uint FindLeafNode(uint particleIndex)
{
    vec4 nodeCenter = uParticleRegionCenter;

    // initial subdivision is nodes 0 - 4
    uint tl = 0;
    uint tr = 1;
    uint bl = 2;
    uint br = 3;
    uint nodeIndex = WhichNodeIsOccupied(particleIndex, nodeCenter, tl, tr, bl, br);

    // loops involve branch prediction, but there is no other way to it than having the particles' _indexOfNodeThatItIsOccupying modified by the CPU during subdivision and subsequently re-uploaded as well
    // TODO: do this
    while(AllNodes[nodeIndex]._isSubdivided == 1)
    {
        // drill down to the next subdivision
        // Note: It was already determined that the particle was in the starting node, so no 
        // bounds checking is required.  I just have to figure out where it is compared to the 
        // center (the nexus of the child nodes).

        // accessing several items from the node, so go ahead and make a copy 
        ParticleQuadTreeNode node = AllNodes[nodeIndex];
        nodeCenter.x = (node._leftEdge + node._rightEdge) * 0.5f;
        nodeCenter.y = (node._topEdge + node._bottomEdge) * 0.5f;
        tl = node._childNodeIndexTopLeft;
        tr = node._childNodeIndexTopRight;
        bl = node._childNodeIndexBottomLeft;
        br = node._childNodeIndexBottomRight;

        nodeIndex = WhichNodeIsOccupied(particleIndex, nodeCenter, tl, tr, bl, br);
    }

    return nodeIndex;
}


/*-----------------------------------------------------------------------------------------------
Description:None
Parameters: None
Returns:    None    
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
void AddPotentiallyCollidableParticle(uint invocationParticleIndex, uint nodeIndex, uint containedParticleIndex)
{
    // self-explanatory
    bool nodeIsUsingParticle = (containedParticleIndex < AllNodes[nodeIndex]._numCurrentParticles);
    uint p2Index = AllNodes[nodeIndex]._indicesForContainedParticles[containedParticleIndex];

    // this is unlikely, but it is good to account for it
    // Note: If I get the code and data right, then this condition will never be true.  But I am human, so I make mistakes, and I should catch myself.
    bool otherParticleInBounds = ((p2Index != -1) && (p2Index < uMaxParticles));

    // there is a high risk that attempting to collide a particle with itself will result in nan when calculating hte normalized line of contact between two particles, so try hard to avoid it
    bool differentParticle = (invocationParticleIndex != p2Index);

    // check if the particles are within collision distance
    // Note: Filter the other particle index because it might be bad.  If it is, use the invocationParticleIndex, which is given by the shader's global invocation ID and is thus known to be good.
    uint p2GoodSoFar = uint(nodeIsUsingParticle && otherParticleInBounds && differentParticle);
    uint filteredpP2Index = 
        (p2Index * p2GoodSoFar) + 
        (invocationParticleIndex * (1 - p2GoodSoFar));
    vec4 p1Pos = AllParticles[invocationParticleIndex]._pos;
    vec4 p2Pos = AllParticles[p2Index]._pos;
    vec4 p1ToP2 = p2Pos - p1Pos;
    float distanceBetweenSqr = dot(p1ToP2, p1ToP2);

    float r1 = AllParticles[invocationParticleIndex]._radiusOfInfluence;
    float r2 = AllParticles[p2Index]._radiusOfInfluence;
    float minDistanceForCollisionSqr = (r1 + r2) * (r1 + r2);

    bool otherParticleInCollisionRange = ( distanceBetweenSqr < minDistanceForCollisionSqr);

    // go ahead and blindly stick the other particle's index into the collidableParticleArray and then increment count if necessary
    // Note: It is ok if it is an invalid index because then the counter won't increment.
    collidableParticleArray[numCollidableParticles] = p2Index;
    uint doTheIncrement = uint(nodeIsUsingParticle && otherParticleInBounds && differentParticle && otherParticleInCollisionRange);
    numCollidableParticles += (1 * doTheIncrement);

}

/*-----------------------------------------------------------------------------------------------
Description:
    Manually runs through each index in the node's collection of particle indices and adds them
    to the collection of collidable particle indices.  

    Note: This function exists for two reasons:
    (1) Have the particle collision detection only run through the collision calculations that 
    are necessary.
    (2) Shaders are terrible at branch conditions, so I want to gather all possible collidable 
    particles into a single array and only do one loop.

Parameters: 
    particleIndex   The particle that this shader invocation is running over.
    nodeIndex       The leaf node that this particle occupies.
Returns:    None    
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
void AddCollidableParticlesFromNode(uint particleIndex, uint nodeIndex)
{
    // Note: If the maximum number of particles in each node changes, then this function MUST 
    // change or risk a memory access error.    

    //AddPotentiallyCollidableParticle(particleIndex, 0, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 1, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 2, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 3, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 4, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 5, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 6, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 7, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 8, nodeIndex);
    //AddPotentiallyCollidableParticle(particleIndex, 9, nodeIndex);

    ParticleQuadTreeNode node = AllNodes[nodeIndex];
//    for (int i = 0; i < node._numCurrentParticles; i++)
//    {
//        collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[i];
//    }

    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 0);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 1);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 2);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 3);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 4);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 5);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 6);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 7);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 8);
    AddPotentiallyCollidableParticle(particleIndex, nodeIndex, 9);



//    uint increment = 1;
//    uint doTheIncrement = 0;
//    uint containedParticleIndex = 0;
//
//    containedParticleIndex = 0;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 1;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 2;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 3;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 4;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 5;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 6;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 7;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 8;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);
//
//    containedParticleIndex = 9;
//    doTheIncrement = uint(containedParticleIndex < node._numCurrentParticles);
//    collidableParticleArray[numCollidableParticles] = node._indicesForContainedParticles[containedParticleIndex];
//    numCollidableParticles += (increment * doTheIncrement);



//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[0];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[1];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[2];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[3];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[4];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[5];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[6];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[7];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[8];
//    collidableParticleArray[numCollidableParticles++] = node._indicesForContainedParticles[9];
    
}

/*-----------------------------------------------------------------------------------------------
Description:None
Parameters: None
Returns:    None    
Creator:    John Cox, 2-4-2017
-----------------------------------------------------------------------------------------------*/
void PopulateCollidableParticlesArray(uint particleIndex, uint nodeIndex)
{
    // determine which, if any, of the particles from the "home" node are within collision range
    AddCollidableParticlesFromNode(particleIndex, nodeIndex);

    // repeat for all neighboring particles
    ParticleQuadTreeNode node = AllNodes[nodeIndex];
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexLeft);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexTopLeft);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexTop);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexTopRight);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexRight);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexBottomRight);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexBottom);
    AddCollidableParticlesFromNode(particleIndex, node._neighborIndexBottomLeft);
}

// TODO: header
void ParticleCollisions(uint particleIndex)
{
    for (int pCounter = 0; pCounter < numCollidableParticles; pCounter ++)
    {
        uint otherParticleIndex = collidableParticleArray[pCounter];
        ParticleCollisionP1WithP2(particleIndex, otherParticleIndex);
        //AllParticles[particleIndex]._netForceThisFrame.y += +0.001f;
    }
}

/*-----------------------------------------------------------------------------------------------
Description:
    The compute shader's startup function.  It governs which nodes the particle will check 
    against for collisions.
Parameters: None
Returns:    None
Creator: John Cox (1-21-2017) (adapted from CPU version, 12-17-2016)
-----------------------------------------------------------------------------------------------*/
void main()
{
    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= uMaxParticles)
    {
        return;
    }

    if (AllParticles[particleIndex]._isActive == 0)
    {
        return;
    }


    uint leafNodeIndex = FindLeafNode(particleIndex);

    PopulateCollidableParticlesArray(particleIndex, leafNodeIndex);
    ParticleCollisions(particleIndex);

//    ParticleCollisionsWithinNode(particleIndex, leafNodeIndex);
//    ParticleCollisionsWithNeighbors(particleIndex, leafNodeIndex);



}

